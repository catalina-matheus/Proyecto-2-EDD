/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Estructuras.ListDocumento;
import Estructuras.NodeDocumento;
import Estructuras.NodeMonticulo;
import Estructuras.NodeUsuario;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import proyecto2.App;

/**
 *
 * @author reina
 */
public class AgregarCola extends javax.swing.JFrame {

    App app = App.getInstance();
    String usuario;
    String documento;
    boolean prioridad;
    

    /**
     * Creates new form AgregarCola
     */
    public AgregarCola() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.limpiarList();
        this.desplegarUsuarios();
        this.limpiarListD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Add = new javax.swing.JToggleButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        ListDocumentosCola = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListUsuariosCola = new javax.swing.JList<>();
        Priori = new javax.swing.JCheckBox();
        Select = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        Imagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel6.setText("SELECCIONE EL USUARIO QUE DESEA");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 240, 350, -1));

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel8.setText("DESEA AGREGAR A LA COLA");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 260, 270, -1));

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel9.setText("SELECCIONE EL DOCUMENTO QUE ");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 240, 320, -1));

        Add.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        Add.setText("Agregar");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        getContentPane().add(Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 440, 120, 20));

        jScrollPane4.setViewportView(ListDocumentosCola);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 290, 330, -1));

        jScrollPane2.setViewportView(ListUsuariosCola);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 290, 330, -1));

        Priori.setText("Es Prioritario");
        Priori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrioriActionPerformed(evt);
            }
        });
        getContentPane().add(Priori, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 440, -1, -1));

        Select.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        Select.setText("Seleccionar");
        Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectActionPerformed(evt);
            }
        });
        getContentPane().add(Select, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 440, 120, 20));

        jToggleButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jToggleButton1.setText("ATR√ÅS");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 530, -1, -1));

        Imagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/AgregarCola.jpg"))); // NOI18N
        getContentPane().add(Imagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        this.setVisible(false);
        MainInterface a = new MainInterface();
        a.setVisible(true);
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectActionPerformed
        usuario = ListUsuariosCola.getSelectedValue();

        if (usuario == null) {
            JOptionPane.showMessageDialog(null, "Tienes que seleccionar un usuario para continuar");
        } else {

            ListDocumento Listica = app.getLista().find(usuario).getDocumentos();
            this.desplegarDocumentos(Listica);

        }
    }//GEN-LAST:event_SelectActionPerformed


    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
        documento = ListDocumentosCola.getSelectedValue();

        if (usuario != null) {
            if (documento == null) {
                JOptionPane.showMessageDialog(null, "Error! Tiene que seleccionar un documento para agregar!");
            } else {
                documento = documento.replace("  En Cola", "");
                ListDocumento listac = app.getLista().find(usuario).getDocumentos();
                NodeDocumento temp = listac.find(documento);
                if (prioridad != true) {
                    AgregarArchivo(documento, listac, temp);
                } else {
                    NodeUsuario nodito = app.getLista().find(usuario);
                    String tipo = nodito.getTipoPrioridad();

                    if (tipo.equals("prioridad_alta")) {
                        this.AgregarArchivo_alta(documento, listac, temp);

                    } else if (tipo.equals("prioridad_media")) {
                        this.AgregarArchivo_medio(documento, listac, temp);

                    } else if (tipo.equals("prioridad_baja")) {
                        this.AgregarArchivo(documento, listac, temp);

                    }
                    Priori.setSelected(false);
                    prioridad = false;

                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Tienes que seleccionar un usuario para continuar");
        }


    }//GEN-LAST:event_AddActionPerformed

    /**
     * @Descripcion: funcion que agrega un NodoDocumento al MonticuloBinario
     * @return
     * @param documento,listac,temp
     * @author: Reinaldo Reyes
     * @version: 13/11/2023
     */
    public void AgregarArchivo(String documento, ListDocumento listac, NodeDocumento temp) {
        if (!temp.isEnCola()) {
            listac.Encola(documento);
            int tiempo = app.tiempoTranscurrido();
            NodeMonticulo doc = new NodeMonticulo(tiempo, temp);
            app.getbMonticulo().insertar(doc);
            JOptionPane.showMessageDialog(null, "El documento seleccionado ha sido agregado a la cola");
            this.desplegarDocumentos(listac);

            //agregamos al HashTable: 
            NodeUsuario find = app.getLista().find(usuario);
            if (find != null) {
                app.getHashTable().hashFunctionInsert(find, temp, tiempo, doc);
                
            }

        } else {
            JOptionPane.showMessageDialog(null, "El documento seleccionado ya esta en cola");
        }

    }

    /**
     * @Descripcion: funcion que agrega un NodoDocumento al principio del
     * MonticuloBinario
     * @return
     * @param documento,listac,temp
     * @author: Reinaldo Reyes
     * @version: 13/11/2023
     */
    public void AgregarArchivo_alta(String documento, ListDocumento listac, NodeDocumento temp) {
        if (!temp.isEnCola()) {

            NodeMonticulo elimtemp = app.getbMonticulo().eliminar_min();
            if (elimtemp != null) {
                int tiempo = elimtemp.getPrioridad() - 1;
                NodeMonticulo doc = new NodeMonticulo(tiempo, temp);
                app.getbMonticulo().insertar(elimtemp);
                app.getbMonticulo().insertar(doc);
                JOptionPane.showMessageDialog(null, "El documento seleccionado ha sido agregado a la cola");
                listac.Encola(documento);
                this.desplegarDocumentos(listac);
                NodeUsuario find = app.getLista().find(usuario);
                if (find != null) {
                    app.getHashTable().hashFunctionInsert(find, temp, tiempo, doc);
                }
            } else {
                this.AgregarArchivo(documento, listac, temp);
            }
        } else {
            JOptionPane.showMessageDialog(null, "El documento seleccionado ya esta en cola");
        }

    }

    /**
     * @Descripcion: funcion que agrega un NodoDocumento en el medio del
     * MonticuloBinario
     * @return
     * @param documento,listac,temp
     * @author: Reinaldo Reyes
     * @version: 13/11/2023
     */
    public void AgregarArchivo_medio(String documento, ListDocumento listac, NodeDocumento temp) {
        if (!temp.isEnCola()) {
            NodeMonticulo[] array = new NodeMonticulo[app.getbMonticulo().getSize()];
            
            if (app.getbMonticulo().peek() != null) {
                NodeMonticulo elimtemp = app.getbMonticulo().LastNode(null, array, 0);
                if (elimtemp != null) {
                    int tiempo = elimtemp.getPrioridad() / 2;
                    NodeMonticulo doc = new NodeMonticulo(tiempo, temp);

                    app.getbMonticulo().insertar(doc);
                    JOptionPane.showMessageDialog(null, "El documento seleccionado ha sido agregado a la cola");
                    listac.Encola(documento);
                    this.desplegarDocumentos(listac);
                    NodeUsuario find = app.getLista().find(usuario);
                    if (find != null) {
                        app.getHashTable().hashFunctionInsert(find, temp, tiempo, doc);
                    }
                } else {
                    this.AgregarArchivo(documento, listac, temp);
                }
            } else {
                this.AgregarArchivo(documento, listac, temp);
            }

        } else {
            JOptionPane.showMessageDialog(null, "El documento seleccionado ya esta en cola");
        }
    }


    private void PrioriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrioriActionPerformed
        if (Priori.isSelected()) {
            prioridad = true;
        } else {
            prioridad = false;
        }


    }//GEN-LAST:event_PrioriActionPerformed

    /**
     * @Descripcion: funcion que despliega la informacion en el JList
     * @return
     * @author: Catalina Matheus, Reinaldo Reyes
     * @version: 12/11/2023
     */
    public void desplegarDocumentos(ListDocumento lista) {
        DefaultListModel modelo = new DefaultListModel();
        NodeDocumento aux = lista.getpFirst();
        while (aux != null) {
            if (!aux.isEnCola()) {
                modelo.addElement(aux.getNombre());
                aux = aux.getpNext();
            } else {
                String n = aux.getNombre() + "  (En Cola)";
                modelo.addElement(n);
                aux = aux.getpNext();

            }

        }
        this.ListDocumentosCola.setModel(modelo);
    }

    /**
     * @Descripcion: funcion que limpia los JList antes de desplegar la
     * informaci√≥n
     * @return
     * @author: Catalina Matheus
     * @version: 17/10/2023
     */
    public DefaultListModel limpiarListD() {
        DefaultListModel modelo = new DefaultListModel();
        ListDocumentosCola.setModel(modelo);
        return modelo;
    }

    /**
     * @Descripcion: funcion que limpia los JList antes de desplegar la
     * informaci√≥n
     * @return
     * @author: Catalina Matheus
     * @version: 17/10/2023
     */
    public DefaultListModel limpiarList() {
        DefaultListModel modelo = new DefaultListModel();
        ListUsuariosCola.setModel(modelo);
        return modelo;
    }

    /**
     * @Descripcion: funcion que despliega la informacion en el JList
     * @return
     * @author: Catalina Matheus
     * @version: 12/11/2023
     */
    public void desplegarUsuarios() {
        DefaultListModel modelo = (DefaultListModel) ListUsuariosCola.getModel();
        NodeUsuario aux = app.getLista().getpFirst();
        while (aux != null) {
            modelo.addElement(aux.getNombreUsuario());
            aux = aux.getpNext();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarCola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarCola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarCola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarCola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarCola().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Add;
    private javax.swing.JLabel Imagen;
    private javax.swing.JList<String> ListDocumentosCola;
    private javax.swing.JList<String> ListUsuariosCola;
    private javax.swing.JCheckBox Priori;
    private javax.swing.JToggleButton Select;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
