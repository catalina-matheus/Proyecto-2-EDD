/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import Estructuras.List;

import Estructuras.Node;
import Estructuras.NodoHash;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import proyecto2.App;

/**
 * @Descripcion interfaz para eliminar de la cola de impresion un archivo
 * @author Catalina Matheus
 * @version 14/11/2023
 */
public class EliminarColaSO extends javax.swing.JFrame {

    App app = App.getInstance();
    String user;
    List<String> lista; 

    /**
     * Creates new form EliminarColaSO
     */
    public EliminarColaSO() {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.limpiarList();
        this.agregarElementosLista();
        user = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListaDocsUsuario = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaUsuarios = new javax.swing.JList<>();
        Imagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToggleButton1.setText("SELECCIONAR");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 280, -1, -1));

        jToggleButton4.setText("SELECCIONAR TODOS");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 500, -1, -1));

        jToggleButton2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jToggleButton2.setText("ATRÁS");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, 100, -1));

        jToggleButton3.setText("SELECCIONAR");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 500, -1, -1));

        jScrollPane2.setViewportView(ListaDocsUsuario);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 660, -1));

        jScrollPane1.setViewportView(listaUsuarios);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 660, 120));

        Imagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/NuevaImagenEliminarColaSO.jpg"))); // NOI18N
        getContentPane().add(Imagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        String username = listaUsuarios.getSelectedValue();
        user = username;

        if (username == null || username.equals("") || username.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error! Debe seleccionar primero el usuario!");
            listaUsuarios.clearSelection();
        } else {
            lista = app.getHashTable().findDocsOfUser(username);
            Node aux = lista.getpFirst();
            DefaultListModel modelo = new DefaultListModel();
            while (aux != null) {
                modelo.addElement(aux.getData());
  
                aux = aux.getpNext();
            }

            ListaDocsUsuario.setModel(modelo);

        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        // TODO add your handling code here:

        if (user != null && !user.equals("") && !user.isEmpty() && !user.equals("")) {
            NodoHash nodoH = null;
            
            Node<String> auxnodito = lista.getpFirst();
            while (auxnodito != null) {
                nodoH = app.getHashTable().deleteInTable(user, auxnodito.getData());
                nodoH.getApuntador().setPrioridad(1);
                app.getbMonticulo().heapifyUpIndex(nodoH.getApuntador());
                app.getbMonticulo().eliminar_min();
                nodoH.getDoc().setEnCola(false);
                auxnodito = auxnodito.getpNext();      
            }
            this.limpiarList();
            this.agregarElementosLista();
            DefaultListModel modelo = new DefaultListModel();
            ListaDocsUsuario.setModel(modelo);
            ListaDocsUsuario.clearSelection();
            listaUsuarios.clearSelection();

            // FALTA ELIMINAR DEL MONTICULO!!!!
            JOptionPane.showMessageDialog(null, "Se logro eliminar correctamente todos los documentos de la cola de impresión!");

        } else {
            JOptionPane.showMessageDialog(null, "Error! Primero debe escoger al usuario!");
        }

    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        String doc = ListaDocsUsuario.getSelectedValue();
        if (user != null && !user.equals("") && !user.equals("") && !user.isEmpty()) {
            if (doc == null && doc.equals("") && doc.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Error! Debe seleccionar el documento que desea elimianr!");
            } else {
                NodoHash nodoH = app.getHashTable().deleteInTable(user, doc);
                
                nodoH.getApuntador().setPrioridad(1);
                app.getbMonticulo().heapifyUpIndex(nodoH.getApuntador());
                app.getbMonticulo().eliminar_min();
                nodoH.getDoc().setEnCola(false);

                JOptionPane.showMessageDialog(null, "Se logró eliminar el documento exitosamente de la cola de impresión!");
                this.limpiarList();
                this.agregarElementosLista();
                DefaultListModel modelo = new DefaultListModel();
                ListaDocsUsuario.setModel(modelo);
                ListaDocsUsuario.clearSelection();
                listaUsuarios.clearSelection();

            }
        } else {
            JOptionPane.showMessageDialog(null, "Error! Primero debe escoger al usuario!");
        }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        this.setVisible(false);
        SistemaOperativo a = new SistemaOperativo();
        a.setVisible(true);
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EliminarColaSO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EliminarColaSO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EliminarColaSO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EliminarColaSO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EliminarColaSO().setVisible(true);
            }
        });
    }

    /**
     * @Descripcion funcion que limpia la lista de usuarios
     * @return
     * @author: Catalina Matheus
     * @version 14/11/2023
     */
    public DefaultListModel limpiarList() {
        DefaultListModel modelo = new DefaultListModel();
        listaUsuarios.setModel(modelo);

        return modelo;
    }

    /**
     * @Descripcion: funcionar que llena la lista con los usuarios actuales en
     * el hash table
     * @return
     * @author: Catalina Matheus
     * @version 14/11/2023
     */
    public DefaultListModel agregarElementosLista() {
        DefaultListModel modelo = (DefaultListModel) listaUsuarios.getModel();
        List<String> listaU = app.getHashTable().printUsers();
        Node aux = listaU.getpFirst();
        while (aux != null) {
            modelo.addElement(aux.getData());
            aux = aux.getpNext();
        }

        return modelo;
//        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Imagen;
    private javax.swing.JList<String> ListaDocsUsuario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JList<String> listaUsuarios;
    // End of variables declaration//GEN-END:variables
}
